{"remainingRequest":"/var/www/html/Edilson/Vue/projeto-02-tarefas/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Edilson/Vue/projeto-02-tarefas/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Edilson/Vue/projeto-02-tarefas/src/App.vue","mtime":1581261284755},{"path":"/var/www/html/Edilson/Vue/projeto-02-tarefas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Edilson/Vue/projeto-02-tarefas/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/Edilson/Vue/projeto-02-tarefas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/Edilson/Vue/projeto-02-tarefas/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TaskGrid from '@/components/TaskGrid.vue'\nimport NewTask from '@/components/NewTask.vue'\nimport TaskProgress from '@/components/TaskProgress.vue'\nimport busTask from '@/buses/busTask'\nexport default {\n\tcomponents : {TaskGrid, NewTask, TaskProgress},\n\tdata() {\n\t\treturn {\n\t\t\ttasks: []\n\t\t}\n\t},\n\tmethods: {\n\t\taddtask(task) {\n\t\t\tconst sameName = t => t.name === task.name;\n\t\t\tconst reallNew = this.tasks.filter(sameName).length === 0;\n\t\t\t!reallNew && alert('Tarefa já realizada');\n\t\t\t//linha abaixo reallNew && (expresão a ser realizada) equivale a if(reallNew){}\n\t\t\treallNew && this.tasks.push({\n\t\t\t\tname: task.name,\n\t\t\t\tpending: task.pending || true\n\t\t\t});\n\t\t}\n\t},\n\tcreated() {\n\t\tbusTask.deleteTask(index => {\n\t\t\tindex >= 0 && this.tasks.splice(index,1);\n\t\t});\n\t\tbusTask.changeStatusTask(index => {\n\t\t\tvar status = this.tasks[index].pending;\n\t\t\tthis.tasks[index].pending = !status;\n\t\t});\n\t\tconst tasksStorage = localStorage.getItem('tasks') ;\n\t\tconst taskArray = JSON.parse(tasksStorage) \n\t\tthis.tasks = Array.isArray(taskArray) ? taskArray : [];\n\t},\n\tcomputed: {\n\t\tprogress() {\n\t\t\tconst total = this.tasks.length;\n\t\t\tconst done =  this.tasks.filter(t => !t.pending).length;\n\t\t\treturn Math.round( done / total * 100 ) || 0;\n\t\t}\n\t},\n\twatch: {\n\t\ttasks() {\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(this.tasks));\n\t\t}\n\t},\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n\t<div id=\"app\">\n\t\t<h1>Tarefas</h1>\n\t\t<TaskProgress :progress=\"progress\"/>\n\t\t<NewTask @taskAdded=\"addtask\"/>\n\t\t<TaskGrid :tasks=\"tasks\"/>\n\t</div>\n</template>\n\n<script>\nimport TaskGrid from '@/components/TaskGrid.vue'\nimport NewTask from '@/components/NewTask.vue'\nimport TaskProgress from '@/components/TaskProgress.vue'\nimport busTask from '@/buses/busTask'\nexport default {\n\tcomponents : {TaskGrid, NewTask, TaskProgress},\n\tdata() {\n\t\treturn {\n\t\t\ttasks: []\n\t\t}\n\t},\n\tmethods: {\n\t\taddtask(task) {\n\t\t\tconst sameName = t => t.name === task.name;\n\t\t\tconst reallNew = this.tasks.filter(sameName).length === 0;\n\t\t\t!reallNew && alert('Tarefa já realizada');\n\t\t\t//linha abaixo reallNew && (expresão a ser realizada) equivale a if(reallNew){}\n\t\t\treallNew && this.tasks.push({\n\t\t\t\tname: task.name,\n\t\t\t\tpending: task.pending || true\n\t\t\t});\n\t\t}\n\t},\n\tcreated() {\n\t\tbusTask.deleteTask(index => {\n\t\t\tindex >= 0 && this.tasks.splice(index,1);\n\t\t});\n\t\tbusTask.changeStatusTask(index => {\n\t\t\tvar status = this.tasks[index].pending;\n\t\t\tthis.tasks[index].pending = !status;\n\t\t});\n\t\tconst tasksStorage = localStorage.getItem('tasks') ;\n\t\tconst taskArray = JSON.parse(tasksStorage) \n\t\tthis.tasks = Array.isArray(taskArray) ? taskArray : [];\n\t},\n\tcomputed: {\n\t\tprogress() {\n\t\t\tconst total = this.tasks.length;\n\t\t\tconst done =  this.tasks.filter(t => !t.pending).length;\n\t\t\treturn Math.round( done / total * 100 ) || 0;\n\t\t}\n\t},\n\twatch: {\n\t\ttasks() {\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(this.tasks));\n\t\t}\n\t},\n}\n</script>\n\n<style>\n\tbody {\n\t\tfont-family: 'Lato', sans-serif;\n\t\tbackground: linear-gradient(to right, rgb(22, 34, 42), rgb(58, 96, 115));\n\t\tcolor: #FFF;\n\t}\n\n\t#app {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t}\n\n\t#app h1 {\n\t\tmargin-bottom: 5px;\n\t\tfont-weight: 300;\n\t\tfont-size: 3rem;\n\t}\n</style>\n"]}]}